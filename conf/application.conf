# https://www.playframework.com/documentation/latest/Configuration
play.modules.enabled += "global.GlobalModule"

play.http.secret.key = "changeme"
play.http.secret.key = ${?APP_SECRET}

play.filters.enabled += "play.filters.cors.CORSFilter"
play.filters.enabled += "play.filters.gzip.GzipFilter"

play.filters.disabled += "play.filters.csrf.CSRFFilter"
play.filters.disabled += "play.filters.hosts.AllowedHostsFilter"

macaroons.secret = ${MACAROONS_SECRET}

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
db.default.driver=org.postgresql.Driver
db.default.url="jdbc:postgresql://"${POSTGRESQL_ADDON_HOST}":"${POSTGRESQL_ADDON_PORT}"/"${POSTGRESQL_ADDON_DB}
db.default.username=${POSTGRESQL_ADDON_USER}
db.default.password=${POSTGRESQL_ADDON_PASSWORD}
play.evolutions.autoApply=false
play.evolutions.autoApply=${?EVOLUTIONS_AUTOAPPLY}


# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 9

play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

warp10 {
  endpoint = ${WARP_ENDPOINT}
  app_name = ${WARP_APP}
  producer_id = ${WARP_PRODUCER}
  sip_hash_app = ${WARP_SIP_HASH_APP}
  sip_hash_token = ${WARP_SIP_HASH_TOKEN}
  aes_token = ${WARP_AES_TOKEN}
}

kafka {
  bootstrap.servers = ${KAFKA_HOST}
  security.protocol = ${KAFKA_SECURITY_PROTOCOL}

  httpchecks {
    interval = ${KAFKA_HTTPCHECKS_INTERVAL}
    topic = ${KAFKA_HTTPCHECKS_TOPIC}
  }

  sslchecks {
    interval = ${KAFKA_SSLCHECKS_INTERVAL}
    topic = ${KAFKA_SSLCHECKS_TOPIC}
  }

  dnschecks {
    interval = ${KAFKA_DNSCHECKS_INTERVAL}
    topic = ${KAFKA_DNSCHECKS_TOPIC}
  }

  icmpchecks {
    interval = ${KAFKA_ICMPCHECKS_INTERVAL}
    topic = ${KAFKA_ICMPCHECKS_TOPIC}
  }
}

zookeeper.servers = "127.0.0.1:2181"
zookeeper.servers = ${?ZOOKEEPER_SERVERS}

scheduler.enabled = false
scheduler.enabled = ${?SCHEDULER_ENABLED}
sharding.enabled = false
sharding.enabled = ${?SHARDING_ENABLED}
sharding.nbshards = 128
sharding.nbshards = ${?SHARDING_NBSHARDS}

auth.internal {
  token = ${INTERNAL_AUTH_TOKEN}
}

instanceid = ${?INSTANCE_ID}

kamon {
  metric {
    tick-interval = 10 second
  }

  environment.host = ${?SCHEDULER_HOST}
}

kamon.prometheus {
  start-embedded-http-server = yes

  embedded-server {
    hostname = 0.0.0.0
    port = 9095
  }
}

